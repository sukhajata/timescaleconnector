// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sukhajata/devicetwin/pkg/db (interfaces: SQLEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	ppconnection "github.com/sukhajata/ppconnection"
	reflect "reflect"
)

// MockSQLEngine is a mock of SQLEngine interface
type MockSQLEngine struct {
	ctrl     *gomock.Controller
	recorder *MockSQLEngineMockRecorder
}

// MockSQLEngineMockRecorder is the mock recorder for MockSQLEngine
type MockSQLEngineMockRecorder struct {
	mock *MockSQLEngine
}

// NewMockSQLEngine creates a new mock instance
func NewMockSQLEngine(ctrl *gomock.Controller) *MockSQLEngine {
	mock := &MockSQLEngine{ctrl: ctrl}
	mock.recorder = &MockSQLEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLEngine) EXPECT() *MockSQLEngineMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSQLEngine) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSQLEngineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLEngine)(nil).Close))
}

// Exec mocks base method
func (m *MockSQLEngine) Exec(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockSQLEngineMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSQLEngine)(nil).Exec), varargs...)
}

// Query mocks base method
func (m *MockSQLEngine) Query(arg0 string, arg1 ...interface{}) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockSQLEngineMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSQLEngine)(nil).Query), varargs...)
}

// QueryConnections mocks base method
func (m *MockSQLEngine) QueryConnections(arg0 string, arg1 ...interface{}) ([]*ppconnection.Connection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryConnections", varargs...)
	ret0, _ := ret[0].([]*ppconnection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConnections indicates an expected call of QueryConnections
func (mr *MockSQLEngineMockRecorder) QueryConnections(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConnections", reflect.TypeOf((*MockSQLEngine)(nil).QueryConnections), varargs...)
}

// ScanRow mocks base method
func (m *MockSQLEngine) ScanRow(arg0 string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRow indicates an expected call of ScanRow
func (mr *MockSQLEngineMockRecorder) ScanRow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRow", reflect.TypeOf((*MockSQLEngine)(nil).ScanRow), varargs...)
}
